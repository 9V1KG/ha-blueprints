# Blueprint meta data
blueprint:
  name: Calendar Check In/Out
  # source_url: https://github.com/9V1KG/...
  author: 9V1KG Klaus
  homeassistant:
    min_version: 2024.7.0
  description: >
    # Calendar Check in/out Events
       
    This is a blueprint automation to check in and out to something - triggered by an on/off switch -
    and then to record the time being checked in. The time will be recorded in minutes, and can 
    optionally be reset to zero, each time when checking in, or recorded cumulatively.
    When checking out, the event can be **recorded as an event in your calendar.**  
    
    
    When checking in and out, a notification can be sent, and an optional announcement can be made
    to your media player. The latter requires the blueprint 
    [Spoken Notification](https://github.com/9V1KG/hass-openwebrx/blob/main/blueprints/script/spoken-notification.yaml)
    from the author.  
    
    
    ## Example
    
    You want to record the time, you are using your (non-smart) oven for baking. Use a NFC tag trigger from a tag, 
    placed near the oven, to trigger the toggle switch from off to on to *check-in*, when you switch on your oven.
    Once, your baking is finished, and you switch off the oven, scan again to *check out*. Then the total
    time in minutes will be recorded in a number field, and an optional event, with start and end time, 
    and a title and description given in this blueprint, will be created in your selected calendar.  
    
    
    ## Note
    
    To record the monthly duration of the check-in time, you might also use a sensor from the 'history_stats'
    platform. Example code for `sensors.yaml` (you need to adapt the entity id of your toggle switch):  
        
    ```
    - platform: history_stats
      name: "monthly check-in time"
      entity_id: input_boolean.toggle_switch
      state: "on"
      type: time
      start: "{{ today_at().replace(day=1) }}"
      end: "{{ now() }}"
    ```

  domain: automation

  input:
    base_input:
      name: Basic Input

      input:

        toggle:
          name: Check in/out switch (Toggle switch). 
          description: >
            Select or define a toggle helper to be toggled for check in and out. When the switch has
            status 'on', you are checked in, when 'off', checked out.
            *Type 'Create a new Toggle helper.' to create a new one.*
          selector:
            entity:
              filter:
                - domain: input_boolean
                - domain: binary_sensor

        dt_check_in:
          name: Input Datetime Helper
          description: >
            Helper field to store recent check-in date & time. 
            *Type 'Create a new Date and/or time helper' to create a new one. 
            Use date & time*
          selector:
            entity:
              filter:
                - domain: input_datetime

        on_minutes:
          name: Check-in time total minutes
          description: >
            A number field, where the cumulative check-in time is recorded.
            The time is recorded in minutes. 
            *Type 'Create a new Number helper.' to create a new one. 
            Use minimum: 0, maximum: 100000, display mode: Input field*
          selector:
            entity:
              filter:
                - domain: input_number

        reset_minutes:
          name: Reset Check-in time to zero
          description: >
            Switch to **on**, when you want to reset the minutes to zero with the start of  
            the event check-in, or leave it **off**, when you want to record the minutes cumulatively.
          selector: 
            boolean:
          default: false

    calender_section:
      name: Calendar
      input:

        my_calendar:
          name: Calendar to be used
          description: >
            Choose the **calendar entity**, where the check-in/out event should be recorded.
          selector:
            target:
              entity:           
                - domain: calendar

        cal_title:
          name: Calendar event title
          description: >
            Enter the title of the calendar event. Will also be used as a title for the notification.
          selector:
            text:
          default: Check-in/out
            
        cal_descr:
          name: Calendar event description
          description: Short description of the event
          selector:
            text:
          default: You have completed your check in and check out.
        
        cal_on:
          name: Calendar event on/off
          description:  >
            Switch on, when you want to record a check-in/check-out event in the selected
            calendar.
          selector:
            boolean:
          default: on
                        
    notify_section:
      name: Notifications
      input:

        alert_on:
          name: Notification Switch
          description: >
            Switch on, when you want to receive a notification for check in and check out.
          selector:
            boolean:
          default: true

        notify_service:
          name: Notify service name
          description: >
            Select the name of your notification service, where the notification for 
            check-in and check out should be sent.
          selector:
            text: {}
          default: notify.notify

        speak_on:
          name: Spoken Notifications
          description: >
            Switch on, when you want a spoken announcement beside the notification. 
            Requires additional blueprint 'spoken-notification.yaml'.
          selector:
            boolean:
          default: false
          
        spoken_notify:
          name: Spoken Notification Script
          description: >
            Select the name of the script for spoken notifications generated by the blueprint 
            'spoken-notification.yaml'. It is necessary only, if you have renamed it, otherwise 
            the default 'Spoken Notification' should be ok.
          selector:
            text:
          default: 'Spoken Notification'
    
# We need these global variables to use them in templates

variables:
  act_tggl: !input toggle
  act_dt_on: !input dt_check_in
  act_min: !input on_minutes
  act_reset_minutes: !input reset_minutes
  act_title: !input cal_title
  act_descr: !input cal_descr
  act_speak_on: !input speak_on
  act_sn: !input spoken_notify

trigger_variables:
  tvr_tggl: !input toggle

trigger:
  - platform: state
    entity_id:
      - !input toggle
    from: "off"
    to: "on"
    id: trg-on
    
  - platform: state
    entity_id:
      - !input toggle
    from: "on"
    to: "off"
    id: trg-off

action:

# Check for entity id of script friendly name, switch
# speak_on variable off, when not found.
  - variables:
      spn_id: >
        {% set scrid = (states
         | selectattr('domain', 'eq', 'script')
         | selectattr('attributes.friendly_name','eq', act_sn) 
         | map(attribute='object_id')
         | list ) -%}
        {% if scrid != 0 -%}script.{{scrid[0] }}
        {% else %}{% set act_speak_on = false %}{% endif %}

  - choose:
      - conditions:
          - condition: trigger
            id:
              - trg-on
        sequence:
          - service: input_datetime.set_datetime
            data:
              datetime: "{{now()}}"
            target:
              entity_id: !input dt_check_in

            # Reset the minutes, when reset is on
          - if:
            - condition: template
              value_template: > 
                {{ act_reset_minutes }}
            then:
              - service: input_number.set_value
                data:
                  value: 0
                target:
                  entity_id: !input on_minutes

            # Notification
          - service: !input notify_service
            data:
              message: >
                Check in is done!
              title: !input cal_title
            enabled: !input alert_on

          - if:
            - condition: template
              value_template: >
                {{ act_speak_on }}
            then:
                # Spoken notification
              - service: "{{ spn_id }}"
                data:
                  message: >
                    {{ act_title }} has started.
                  
      - conditions:
          - condition: trigger
            id:
              - trg-off
        sequence:
          - variables:
              td: >
                {{ ( as_timestamp(now())
                -as_timestamp(states(act_dt_on))) // 60 }}

          - service: input_number.set_value
            data:
              value: |
                {{ states(act_min)|int + td }}
            target:
              entity_id: !input on_minutes

            # Notification
          - service: !input notify_service
            data:
              message: >
                Finished after {{ td | round(0) }} minutes.
              title: !input cal_title
            enabled: !input alert_on

          - if:
            - condition: template
              value_template: > 
                {{ act_speak_on }}
            then:
                # Spoken notification
              - service: "{{spn_id}}"
                data:
                  message: >
                    {{ act_title }}: finished after {{ td | round(0) }} minutes.

            # Calendar event
          - service: calendar.create_event
            target:
              entity_id: calendar.personal
            data:
              summary: !input cal_title
              description: >
                {{ act_descr }} Duration: {{ td | round(0) }} min
              start_date_time: |
                {{ (as_datetime(states(act_dt_on))) }}
              end_date_time: |
                {{ as_timestamp(now()) | timestamp_custom('%Y-%m-%d %H:%M:%S')}}
            enabled: !input cal_on

  - delay:
      hours: 0
      minutes: 0
      seconds: 10
      milliseconds: 0

mode: single
